<form method="POST" action="{{formAction}}">
  {{ csrfField() }}
  @if(request.qs().returnTo)
    <input type="hidden" name="returnTo" value="{{request.qs().returnTo}}" />
  @end

  <div class="mb-3 pb-3 border-bottom border-1">
    <label for="name" class="form-label fw-bold">Template Name</label>
    @inputError('name')
      <input type="text" class="form-control is-invalid" id="name" name="name" value="{{ old('name') || tpl.name }}" data-1p-ignore />
      <div class="invalid-feedback">
        @each(message in $messages)
          <p>{{ message }}</p>
        @end
      </div>
    @else
      <input type="text" class="form-control {{old('name') ? 'is-valid' : ''}}" id="name" name="name" value="{{ old('name') || tpl.name }}"  data-1p-ignore />
    @end
  </div>

  @let(sections = old('sections') || tpl.contents.sections || [ { name: "", parameters: [] } ] )

  <div id="template-sections">
    @each((section, index) in sections)
      <fieldset name="sections[{{index}}]" class="mb-3 pb-3 border-bottom border-1">
        <div class="mb-3">
          <label class="form-label fw-bold">Section Name</label>
          @inputError(`sections.${index}.name`)
            <input type="text" class="form-control is-invalid" name="sections[{{index}}][name]" value="{{(old(`sections.${index}.name`) || section.name || '').trim()}}" />
            <div class="invalid-feedback">
              @each(message in $messages)
                <p>{{ message }}</p>
              @end
            </div>
          @else
            <input type="text" class="form-control {{old(`sections.${index}.name`) ? 'is-valid' : ''}}" name="sections[{{index}}][name]" value="{{(old(`sections.${index}.name`) || section.name).trim()}}" />
          @end
        </div>
        <h6 class="fw-bold ps-5">Parameters</h6>
        <ol class="ps-5">
          @if(section.parameters)
            @each((parameterId, paramIndex) in section.parameters)
              <li class="mb-2 w-50 input-group">
                <select class="form-select" name="sections[{{index}}][parameters][]">
                  @each(parameter in parameters)
                    <option {{ parameter.id == parameterId ? 'selected' : ''}} value="{{parameter.id}}">{{parameter.name}}</option>
                  @endeach
                </select>
                <button class="remove-parameter btn btn-outline-danger">Remove</button>
              </li>
            @end
          @else
            <li class="mb-2 w-50 input-group">
              <select class="form-select" name="sections[{{index}}][parameters][]">
                @each(parameter in parameters)
                  <option {{ parameter.id == parameterId ? 'selected' : ''}} value="{{parameter.id}}">{{parameter.name}}</option>
                @endeach
              </select>
              <button class="remove-parameter btn btn-outline-danger">Remove</button>
            </li>
          @endif
        </ol>
        <div class="ps-5 mb-3">
          <button class="add-parameter btn btn-outline-primary">Add Parameter</button>
        </div>
        <button class="remove-section btn btn-outline-danger">Remove Section</button>
      </fieldset>
    @end
  </div>
  <div class="mb-3 pb-3 border-bottom border-1">
    <button class="add-section btn btn-outline-primary">Add Section</button>
  </div>
  <div class="d-grid gap-2 d-md-block">
    <a href="{{route('settings.report_templates.index')}}" class="btn btn-outline-primary">Cancel</a>
    <button type="submit" class="btn btn-primary">Save Template</button>
  </div>
</form>

<template id="section-template">
  <fieldset name="sections[]" class="mb-3 pb-3 border-bottom border-1">
    <div class="mb-3">
      <label class="form-label fw-bold">Section Name</label>
      <input type="text" class="form-control" name="sections[][name]" value="" />
    </div>
    <h6 class="fw-bold ps-5">Parameters</h6>
    <ol class="ps-5"></ol>
    <div class="ps-5 mb-3">
      <button class="add-parameter btn btn-outline-primary">Add Parameter</button>
    </div>
    <button class="remove-section btn btn-outline-danger">Remove Section</button>
  </fieldset>
</template>

<template id="parameter-template">
  <li class="mb-2 w-50 input-group">
    <select class="form-select" name="sections[][parameters][]">
      @each(parameter in parameters)
        <option value="{{parameter.id}}">{{parameter.name}}</option>
      @endeach
    </select>
    <button class="remove-parameter btn btn-outline-danger">Remove</button>
  </li>
</template>

<script type="text/javascript">
  const parameterTemplate = document.getElementById('parameter-template');
  const addParameter = (event) => {
    const targetSection = event.target.parentNode.parentNode;
    const targetParameters = targetSection.getElementsByTagName('ol')[0];

    const clone = parameterTemplate.content.cloneNode(true);
    const selectInput = clone.firstElementChild.firstElementChild;

    selectInput.name = `${targetSection.name}[parameters][]`

    targetParameters.appendChild(clone);
    document.querySelectorAll(`[name="${selectInput.name}"]`)[targetParameters.children.length - 1].focus();
  };

  const sectionTemplate = document.getElementById('section-template');
  const templateSections = document.getElementById('template-sections');
  const addSection = (event) => {
    const section = sectionTemplate.content.cloneNode(true);
    const sectionId = templateSections.children.length;
    const sectionName = `sections[${sectionId}]`;
    section.firstElementChild.name = sectionName

    const input = section.firstElementChild.getElementsByTagName('input')[0]
    input.name = `${sectionName}[name]`

    const targetParameters = section.firstElementChild.getElementsByTagName('ol')[0];

    const clone = parameterTemplate.content.cloneNode(true);
    const selectInput = clone.firstElementChild.firstElementChild;
    selectInput.name = `${sectionName}[parameters][]`

    targetParameters.appendChild(clone);
    templateSections.appendChild(section);
    document.querySelectorAll(`[name="${input.name}"]`)[0].focus();
  }

  const handleButton = (event) => {
    let handled = false;
    if (event.target.classList.contains('add-parameter')) {
      addParameter(event);
      handled = true;
    }

    if (event.target.classList.contains('remove-parameter')) {
      if (event.target.parentNode.children.length > 1) {
        const parameter = event.target.parentNode;
        parameter.parentNode.removeChild(parameter);
      } else {
        alert('Cannot remove last parameter in section');
      }
      handled = true;
    }

    if (event.target.classList.contains('add-section')) {
      addSection(event)
      handled = true;
    }

    if (event.target.classList.contains('remove-section')) {
      const section = event.target.parentNode;
      if (section.parentNode.children.length > 1) {
        section.parentNode.removeChild(section);
      } else {
        alert('Cannot remove last section');
      }
      handled = true;
    }

    if (handled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  document.addEventListener('click', handleButton);
</script>
